<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Lisp - Tag - Guanlan Dai</title>
        <link>https://rmmod.com/tags/lisp/</link>
        <description>Lisp - Tag - Guanlan Dai</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hackertian@gmail.com (guanlan)</managingEditor>
            <webMaster>hackertian@gmail.com (guanlan)</webMaster><lastBuildDate>Sun, 03 Feb 2013 02:39:54 &#43;0000</lastBuildDate><atom:link href="https://rmmod.com/tags/lisp/" rel="self" type="application/rss+xml" /><item>
    <title>Snippets for Racket Language</title>
    <link>https://rmmod.com/snippets-for-racket-language/</link>
    <pubDate>Sun, 03 Feb 2013 02:39:54 &#43;0000</pubDate>
    <author>guanlan</author>
    <guid>https://rmmod.com/snippets-for-racket-language/</guid>
    <description><![CDATA[In the CS 5010 - Programming Design Paradigm course, we need write tons of documents, repeat ourselves again and again, so I develop this snippet to save us time. If you using vim, you need install snipMate first, You can get the snippet on my Github: https://github.com/guanlan/snippet-for-racket download the snippet file and put in ~/.vim/snippets/ You can watch demo here This snippets is also available on sublime, you can read tutorial here.]]></description>
</item>
<item>
    <title>Rethink in Functional Languages</title>
    <link>https://rmmod.com/rethink-in-functional-languages/</link>
    <pubDate>Wed, 09 Jan 2013 15:21:07 &#43;0000</pubDate>
    <author>guanlan</author>
    <guid>https://rmmod.com/rethink-in-functional-languages/</guid>
    <description><![CDATA[After about 3 months to learn and using Racket (a programming language in Lisp/Scheme family), I learning lots of concepts of programming. The most important thing in FL(functional languages) is: &quot;All data are immutable. All functions are pure.&quot; Immutable Data Immutable data cannot be modified after being created. It has many advantages:
 Inherently Thread safety Parallel programming is the nightmare of some programers, because different threads simultaneously access the same object can cause unexpected problem, such like a race conditions.]]></description>
</item>
<item>
    <title>How to use Python like Lisp</title>
    <link>https://rmmod.com/how-to-use-python-like-lisp/</link>
    <pubDate>Mon, 19 Nov 2012 17:25:54 &#43;0000</pubDate>
    <author>guanlan</author>
    <guid>https://rmmod.com/how-to-use-python-like-lisp/</guid>
    <description><![CDATA[Lisp has some very effective way to get jobs done, this article give you a direct way to use Python like Lisp.``` cons = lambda el, lst: (el, lst)
1  mklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)   car = lambda lst: lst[0] if lst else lst
1  cdr = lambda lst: lst[1] if lst else lst   nth = lambda n, lst: nth(n-1, cdr(lst)) if n ]]&gt; 0 else car(lst)]]></description>
</item>
</channel>
</rss>
