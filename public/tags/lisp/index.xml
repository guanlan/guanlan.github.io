<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on Guanlan Dai</title>
    <link>https://rmmod.com/tags/lisp/</link>
    <description>Recent content in Lisp on Guanlan Dai</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Feb 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rmmod.com/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Snippets for Racket Language</title>
      <link>https://rmmod.com/posts/snippets-for-racket-language/</link>
      <pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://rmmod.com/posts/snippets-for-racket-language/</guid>
      <description>&lt;p&gt;In the CS 5010 - Programming Design Paradigm course, we need write tons of documents,  repeat ourselves again and again, so I develop this snippet to save us time. If you using vim, you need install &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=2540&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;snipMate&lt;/a&gt; first, You can get the snippet on my Github: &lt;a href=&#34;https://github.com/guanlan/snippet-for-racket&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;https://github.com/guanlan/snippet-for-racket&lt;/a&gt; download the snippet file and put in ~/.vim/snippets/ You can &lt;a href=&#34;http://www.youtube.com/watch?v=upGPM9jN25Y&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;watch demo here&lt;/a&gt; This snippets is also available on sublime, you can &lt;a href=&#34;http://web-design-weekly.com/2012/07/03/snippets-in-sublime-text-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;read tutorial here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rethink in Functional Languages</title>
      <link>https://rmmod.com/posts/rethink-in-functional-languages/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://rmmod.com/posts/rethink-in-functional-languages/</guid>
      <description>&lt;p&gt;After about 3 months to learn and using Racket (a programming language in Lisp/Scheme family),  I learning lots of concepts of programming. The most important thing in FL(functional languages) is: &lt;strong&gt;&amp;quot;&lt;em&gt;All data are immutable. All functions are pure.&lt;/em&gt;&amp;quot;&lt;/strong&gt;  &lt;/p&gt;&#xA;&lt;h2 id=&#34;immutable-data&#34;&gt; Immutable Data&lt;/h2&gt;&#xA;&lt;p&gt;Immutable data cannot be modified after being created. It has many advantages:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Inherently Thread safety&lt;/strong&gt; Parallel programming is the nightmare of some programers, because different threads simultaneously access the same object can cause unexpected problem, such like a race conditions. The most famous and classical example is &lt;a href=&#34;http://en.wikipedia.org/wiki/Race_condition#Example&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Bank Account Problem&lt;/a&gt;. Today we get more and more cores in our computers, so the &lt;a href=&#34;http://www.infoq.com/news/2008/06/scala-vs-erlang&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;multi-core crisis&lt;/a&gt; we need to face, some experts believe in the future, we using Scala or Erlang to deal with this crisis.Interesting thing is many &amp;ldquo;next generation&amp;rdquo; language is either the functional or support functional paradigm.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Eliminate side-effects&lt;/strong&gt; There are so many reasons. Most important thing is global variables are difficult to understand. For example, if we want understand one functions in the non-trival project,  and we find a variable define in other place, so we will jump to the definition of this variable and other places where modify it, it will cost us more time to figure out what the exactly meaning of this function. So there is the same reason why the code is much easier to understand if we use immutable objects, because the scope of an immutable object is limited as possible. It will make our programming easier and more robust.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;  The programming experts from other languages also know we need use immutable data as more as possible: Joshua Bloch,the author of Effective Java, said, “If an object is immutable, it can be in only one state, and you win big.You never have to worry about what state the object is in, and you can share it freely, with no need for synchronization.” Scott Meyers, Effective C++, Item 3: &lt;a href=&#34;http://codeidol.com/cpp/effective-cpp/Accustoming-Yourself-to-C/Item-3-Use-const-whenever-possible/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer &#34;&gt;Use &lt;em&gt;const&lt;/em&gt; whenever possible&lt;/a&gt;. Other languages also use immutable data frequently, such like Python, the number/string/tuple types are immutable data, the String build-in class in Java is immutable too. But immutable data is inconvenient in some situation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to use Python like Lisp</title>
      <link>https://rmmod.com/posts/how-to-use-python-like-lisp/</link>
      <pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate>
      <guid>https://rmmod.com/posts/how-to-use-python-like-lisp/</guid>
      <description>&lt;p&gt;Lisp has some very effective way to get jobs done, this article give you a direct way to use Python like Lisp.```&#xA;cons = lambda el, lst: (el, lst)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None) &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;car = lambda lst: lst[0] if lst else lst&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cdr = lambda lst: lst[1] if lst else lst &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nth = lambda n, lst: nth(n-1, cdr(lst)) if n ]]&amp;gt; 0 else car(lst)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;length = lambda lst, count=0: length(cdr(lst), count+1) if lst else count&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;begin = lambda *args: args[-1]&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
