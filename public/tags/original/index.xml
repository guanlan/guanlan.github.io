<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Original on Guanlan Dai</title>
    <link>https://rmmod.com/tags/original/</link>
    <description>Recent content in Original on Guanlan Dai</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Jul 2011 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://rmmod.com/tags/original/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Basic Objects Learning Notes</title>
      <link>https://rmmod.com/posts/cppblog/2011-07-21-python-basic-objects-learning-notes-en/</link>
      <pubDate>Thu, 21 Jul 2011 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2011-07-21-python-basic-objects-learning-notes-en/</guid>
      <description>&lt;p&gt;Recently revisiting the book &amp;ldquo;Python Source Code Analysis&amp;rdquo;, I&amp;rsquo;ve recorded the key points about Python basic objects as follows:&lt;/p&gt;&#xA;&lt;p&gt;​    &lt;strong&gt;Python Integer Objects&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Python integers use C language&amp;rsquo;s long type for storage&lt;/li&gt;&#xA;&lt;li&gt;Python int addition checks if the result overflows, and automatically converts to pyLongObject if it does&lt;/li&gt;&#xA;&lt;li&gt;Documentation in Python is seamlessly integrated into the language implementation&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = 11  &#xA;print a.__doc__&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Small integer objects are completely cached in memory, other integer objects take turns using a block of memory space&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Favorite Nine Firefox Add-ons in 2010</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-28-my-favorite-nine-firefox-addons-en/</link>
      <pubDate>Mon, 28 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-28-my-favorite-nine-firefox-addons-en/</guid>
      <description>&lt;h2 id=&#34;doubans-firefox-group-says&#34;&gt;Douban&amp;rsquo;s &lt;a href=&#34;http://www.douban.com/group/Firefox/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Firefox Group&lt;/a&gt;&#xA; says:&lt;/h2&gt;&#xA;&lt;p&gt;Firefox is not perfect, not the most stable, not without vulnerabilities, and not the fastest, but it can be yours.&lt;/p&gt;&#xA;&lt;p&gt;I really like this quote. It&amp;rsquo;s because of the rich and colorful add-ons that Firefox has become so popular.&lt;br&gt;&#xA;The following add-ons are my personal favorites, and I recommend them to everyone!&lt;/p&gt;&#xA;&lt;h2 id=&#34;1colorfultabs&#34;&gt;1.ColorfulTabs&lt;/h2&gt;&#xA;&lt;p&gt;People can distinguish colors much faster than text. This add-on generates tab colors based on the page&amp;rsquo;s main color scheme, making your tabs colorful. Not only is it pleasing to the eye, but it also makes it easier to switch to the tab you want.&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx Startup, Shutdown and Configuration Script</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-28-nginx-startup-shutdown-configuration-script-en/</link>
      <pubDate>Mon, 28 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-28-nginx-startup-shutdown-configuration-script-en/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;################################################&#xA;#!/bin/bash&#xA;# v.0.0.3&#xA;# create by jackbillow at 2007.10.15&#xA;# redevelop by XGuru at 2010.6.28&#xA;# On Ubuntu 10.04&#xA;# nginx - This shell script takes care of starting and stopping nginx.&#xA;#&#xA;# description: nginx [engine x] is light http web/proxy server&#xA;# that answers incoming ftp service requests.&#xA;###############################################&#xA;&#xA;nginx_path=&amp;#34;/usr/local/nginx&amp;#34;&#xA;nginx_pid=&amp;#34;/usr/local/nginx/logs/nginx.pid&amp;#34;&#xA;prog=&amp;#34;nginx&amp;#34;&#xA;&#xA;RETVAL=0&#xA;&#xA;&#xA;start() {&#xA;# Start daemons.&#xA;        if [ -e $nginx_path/conf/nginx.conf ];then&#xA;          echo -n $&amp;#34;Starting $prog: &amp;#34;&#xA;          $nginx_path/sbin/nginx -c $nginx_path/conf/nginx.conf &amp;amp;&#xA;          RETVAL=$?&#xA;        [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; {&#xA;        echo Start &amp;#34;$prog&amp;#34; successfully!&#xA;        }&#xA;        else&#xA;        RETVAL=1&#xA;        fi&#xA;        return $RETVAL&#xA;}&#xA;# Stop daemons.&#xA;stop() {&#xA;        echo -n $&amp;#34;Stopping $prog\n&amp;#34;&#xA;        sudo killall -9 nginx&#xA;        RETVAL=$?&#xA;}&#xA;# See how we were called.&#xA;&#xA;conf(){&#xA;        gvim &amp;#34;$nginx_path/conf/nginx.conf&amp;#34;&#xA;}&#xA;case &amp;#34;$1&amp;#34; in&#xA;start)&#xA;        start&#xA;        ;;&#xA;stop)&#xA;        stop&#xA;        ;;&#xA;conf)&#xA;        conf&#xA;        ;;        &#xA;restart)&#xA;        stop&#xA;        start&#xA;        ;;&#xA;*)&#xA;        echo $&amp;#34;Usage: $0 {start|stop|conf|restart}&amp;#34;&#xA;        echo $&amp;#34;Your may need root privilege to execute this script!&amp;#34;&#xA;        exit 1&#xA;esac&#xA;exit $RETVAL&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;Original link: &lt;a href=&#34;http://www.cppblog.com/xguru/archive/2010/06/28/118868.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;http://www.cppblog.com/xguru/archive/2010/06/28/118868.html&lt;/a&gt;&#xA;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libevent Analysis Notes (3) - Determining I/O Multiplexing Mechanism</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-25-libevent-analysis-notes-3-io-multiplexing-mechanism-determination-en/</link>
      <pubDate>Fri, 25 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-25-libevent-analysis-notes-3-io-multiplexing-mechanism-determination-en/</guid>
      <description>&lt;p&gt;Libevent&amp;rsquo;s original intention was to design a cross-platform lightweight I/O framework. Due to historical issues, the I/O multiplexing mechanisms across different platforms are difficult to unify. Therefore, the methods for handling cross-platform compatibility deserve special attention.&lt;/p&gt;&#xA;&lt;p&gt;eventop is defined in the source code as follows:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;static const struct eventop *eventops[]={&#xA;&#xA;#ifdef HAVE_EVENT_PORTS&#xA;&#xA;         &amp;amp;evportops,&#xA;&#xA;#endif &#xA;&#xA;…&#xA;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;As can be seen, libevent uses macros to find available multiplexing mechanisms at compile time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libevent Analysis Notes (1) - Installation and Usage</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-24-libevent-analysis-notes-1-installation-and-usage-en/</link>
      <pubDate>Thu, 24 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-24-libevent-analysis-notes-1-installation-and-usage-en/</guid>
      <description>&lt;p&gt;Introduction to Libevent&lt;/p&gt;&#xA;&lt;p&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/None.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/None.gif, https://rmmod.com/img/None.gif 1.5x, https://rmmod.com/img/None.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/None.gif&#34;&#xA;        title=&#34;/img/None.gif&#34; /&gt;The libevent API provides a mechanism to execute a callback function when a specific event occurs on a file descriptor or after a timeout has been reached. Furthermore, libevent also support callbacks due to signals or regular timeouts.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;The libevent API provides such a mechanism:  &#xA;Execute a specified callback function when a specific event occurs in a specified file descriptor, or when a timeout is reached.  &#xA;Additionally, libevent callback functionality also supports triggering by signals or regular timeouts.  &#xA;Note that its license is a BSD-style license, which can be used in commercial products without having to open source.  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;​&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libevent Learning Notes (2) - Basic Data Structures</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-24-libevent-learning-notes-2-basic-data-structures-en/</link>
      <pubDate>Thu, 24 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-24-libevent-learning-notes-2-basic-data-structures-en/</guid>
      <description>&lt;h2 id=&#34;21-event_base-core-event-base-data-structure&#34;&gt;2.1 event_base Core Event Base Data Structure&lt;/h2&gt;&#xA;&lt;h2&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/libevent1.jpg&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/libevent1.jpg, https://rmmod.com/img/libevent1.jpg 1.5x, https://rmmod.com/img/libevent1.jpg 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/libevent1.jpg&#34;&#xA;        title=&#34;/img/libevent1.jpg&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;As can be seen, event_base is the core part of the entire libevent, which consists of three structures: a time heap (corresponding to EVLIST_TIMEOUT), a registered queue (corresponding to EVLIST_INSERTE), and an active event queue (corresponding to EVLIST_ACTIVE).&lt;/p&gt;&#xA;&lt;p&gt;The time heap uses min-Heap (minimum binary heap), while both the registered queue and active event queue use doubly linked lists.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM Commands Big Picture</title>
      <link>https://rmmod.com/posts/cppblog/2010-06-24-vim-commands-big-picture-en/</link>
      <pubDate>Thu, 24 Jun 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-06-24-vim-commands-big-picture-en/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet1.jpg&#34; rel=&#34;&#34;&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/o_vim_cheat_sheet1.jpg&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/o_vim_cheat_sheet1.jpg, https://rmmod.com/img/o_vim_cheat_sheet1.jpg 1.5x, https://rmmod.com/img/o_vim_cheat_sheet1.jpg 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/o_vim_cheat_sheet1.jpg&#34;&#xA;        title=&#34;/img/o_vim_cheat_sheet1.jpg&#34; /&gt;&lt;/a&gt;&#xA;&lt;br&gt;&#xA;The &lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet.jpg&#34; rel=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet.jpg&#34; rel=&#34;&#34;&gt;image&lt;/a&gt;&#xA;(&lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet1.jpg&#34; rel=&#34;&#34;&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet1.jpg&#34; rel=&#34;&#34;&gt;here&lt;/a&gt;&#xA;&lt;a href=&#34;https://rmmod.com/img/o_vim_cheat_sheet.jpg&#34; rel=&#34;&#34;&gt;&lt;/a&gt;&#xA;) might be a bit large, but I think it&amp;rsquo;s quite convenient to view. Feedback on any errors is welcome, and I&amp;rsquo;ll correct them as soon as possible. Here&amp;rsquo;s the &lt;a href=&#34;http://jrmiii.com/2009/03/06/learning-vim-the-pragmatic-way.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;original English version.&lt;br&gt;&#xA;&lt;/a&gt;&#xA;&lt;br&gt;&#xA;Here are some similar ones:[&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Cheat sheet](&lt;a href=&#34;http://www.tuxfiles.org/linuxhelp/vimcheat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;http://www.tuxfiles.org/linuxhelp/vimcheat.html&lt;/a&gt;&#xA;) &lt;a href=&#34;http://www.fprintf.net/vimCheatSheet.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;here&lt;/a&gt;&#xA;,&lt;/li&gt;&#xA;&lt;li&gt;Key mapping &lt;a href=&#34;https://rmmod.com/img/File:Vi-vim-cheat-sheet.gif&#34; rel=&#34;&#34;&gt;here&lt;/a&gt;&#xA;[&lt;a href=&#34;https://rmmod.com/img/File:Vi-vim-cheat-sheet.gif&#34; rel=&#34;&#34;&gt;EN&lt;/a&gt;&#xA;] [&lt;em&gt;&lt;a href=&#34;https://rmmod.com/img/vi-vim-cheat-sheet.png&#34; rel=&#34;&#34;&gt;&lt;em&gt;CN&lt;/em&gt;&lt;/a&gt;&#xA;&lt;/em&gt;] ,&lt;/li&gt;&#xA;&lt;li&gt;vgod&amp;rsquo;s &lt;a href=&#34;http://blog.vgod.tw/wp-content/uploads/2009/12/vgod-vim-cheat-sheet-full.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;version&lt;/a&gt;&#xA;,&lt;/li&gt;&#xA;&lt;li&gt;Another one &lt;a href=&#34;https://rmmod.com/img/060504194114.jpg&#34; rel=&#34;&#34;&gt;here&lt;/a&gt;&#xA;,&lt;/li&gt;&#xA;&lt;li&gt;And a &lt;a href=&#34;https://rmmod.com/img/vi.png&#34; rel=&#34;&#34;&gt;wallpaper&lt;/a&gt;&#xA; here.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;Original link: &lt;a href=&#34;http://www.cppblog.com/xguru/archive/2010/06/24/118623.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;http://www.cppblog.com/xguru/archive/2010/06/24/118623.html&lt;/a&gt;&#xA;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memcached Source Code Analysis Notes PDF</title>
      <link>https://rmmod.com/posts/cppblog/2010-01-23-memcached-source-code-analysis-notes-pdf-en/</link>
      <pubDate>Sat, 23 Jan 2010 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2010-01-23-memcached-source-code-analysis-notes-pdf-en/</guid>
      <description>&lt;p&gt;Memcached is a free, open source, high-performance, distributed memory object caching system, aimed at speeding up dynamic web applications by alleviating database load.&lt;/p&gt;&#xA;&lt;p&gt;As the saying goes, the palest ink is better than the best memory.&lt;br&gt;&#xA;&lt;a href=&#34;http://www.cppblog.com/Files/guanlan/Memcached.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;This document&lt;/a&gt;&#xA; is what I use to record some experiences during the process of reading Memcached source code, as well as analyzing some internal working mechanisms of memcached.&lt;br&gt;&#xA;I hope it can also bring convenience to everyone.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Random Thoughts Series 2 - Factorial Algorithm Thoughts</title>
      <link>https://rmmod.com/posts/cppblog/2009-12-30-random-thoughts-series-2-factorial-algorithm-thoughts-en/</link>
      <pubDate>Wed, 30 Dec 2009 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2009-12-30-random-thoughts-series-2-factorial-algorithm-thoughts-en/</guid>
      <description>&lt;p&gt;by &lt;a href=&#34;http://www.cppblog.com/xguru/archive/2009/12/29/104344.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;guanlan&lt;/a&gt;&#xA;&lt;a href=&#34;http://topic.csdn.net/t/20030916/20/2267097.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;Factorial again, this is an old topic, right? Without even thinking, a simple recursion will do!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/None.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/None.gif, https://rmmod.com/img/None.gif 1.5x, https://rmmod.com/img/None.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/None.gif&#34;&#xA;        title=&#34;/img/None.gif&#34; /&gt;int factorial(int n)&lt;br&gt;&#xA;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/ExpandedBlockStart.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/ExpandedBlockStart.gif, https://rmmod.com/img/ExpandedBlockStart.gif 1.5x, https://rmmod.com/img/ExpandedBlockStart.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/ExpandedBlockStart.gif&#34;&#xA;        title=&#34;/img/ExpandedBlockStart.gif&#34; /&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/ContractedBlock.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/ContractedBlock.gif, https://rmmod.com/img/ContractedBlock.gif 1.5x, https://rmmod.com/img/ContractedBlock.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/ContractedBlock.gif&#34;&#xA;        title=&#34;/img/ContractedBlock.gif&#34; /&gt;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/dot.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/dot.gif, https://rmmod.com/img/dot.gif 1.5x, https://rmmod.com/img/dot.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/dot.gif&#34;&#xA;        title=&#34;/img/dot.gif&#34; /&gt;{&lt;br&gt;&#xA;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/InBlock.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/InBlock.gif, https://rmmod.com/img/InBlock.gif 1.5x, https://rmmod.com/img/InBlock.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/InBlock.gif&#34;&#xA;        title=&#34;/img/InBlock.gif&#34; /&gt; if( n == 1)&lt;br&gt;&#xA;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/InBlock.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/InBlock.gif, https://rmmod.com/img/InBlock.gif 1.5x, https://rmmod.com/img/InBlock.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/InBlock.gif&#34;&#xA;        title=&#34;/img/InBlock.gif&#34; /&gt; return 1;&lt;br&gt;&#xA;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/InBlock.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/InBlock.gif, https://rmmod.com/img/InBlock.gif 1.5x, https://rmmod.com/img/InBlock.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/InBlock.gif&#34;&#xA;        title=&#34;/img/InBlock.gif&#34; /&gt; return n * factorial(n-1);&lt;br&gt;&#xA;&lt;img&#xA;        class=&#34;lazyload&#34;&#xA;        src=&#34;https://rmmod.com/svg/loading.min.svg&#34;&#xA;        data-src=&#34;https://rmmod.com/img/ExpandedBlockEnd.gif&#34;&#xA;        data-srcset=&#34;https://rmmod.com/img/ExpandedBlockEnd.gif, https://rmmod.com/img/ExpandedBlockEnd.gif 1.5x, https://rmmod.com/img/ExpandedBlockEnd.gif 2x&#34;&#xA;        data-sizes=&#34;auto&#34;&#xA;        alt=&#34;/img/ExpandedBlockEnd.gif&#34;&#xA;        title=&#34;/img/ExpandedBlockEnd.gif&#34; /&gt;}&lt;/p&gt;</description>
    </item>
    <item>
      <title>A &#39;Strange Phenomenon&#39; in C/C&#43;&#43; Arrays</title>
      <link>https://rmmod.com/posts/cppblog/2009-12-24-cc-array-peculiar-phenomenon-en/</link>
      <pubDate>Thu, 24 Dec 2009 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2009-12-24-cc-array-peculiar-phenomenon-en/</guid>
      <description>&lt;p&gt;Everyone is familiar with using arrays, right?&lt;br&gt;&#xA;Take a look at this program, it&amp;rsquo;s quite simple.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include&amp;lt;iostream&amp;gt;&#xA;int main()&#xA;{&#xA;    int a[] = {1,2,3,4,5};&#xA;    for(int i = 0 ; i &amp;lt; 5; i&amp;#43;&amp;#43;)&#xA;        std::cout &amp;lt;&amp;lt; i[a] &amp;lt;&amp;lt; &amp;#34; &amp;#34;;&#xA;    return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now look carefully at line 6.&lt;br&gt;&#xA;What did you notice?&lt;br&gt;&#xA;Try compiling it to see if it passes?&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s simplify this program even more&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int a[5] = {1,2,3,4,5};&#xA;int b = 1[a];&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Now let&amp;rsquo;s look at the generated assembly code&lt;/p&gt;</description>
    </item>
    <item>
      <title>Random Thoughts Series 1 - C&#43;&#43; Thoughts</title>
      <link>https://rmmod.com/posts/cppblog/2009-12-20-random-thoughts-series-1-cpp-thoughts-en/</link>
      <pubDate>Sun, 20 Dec 2009 00:00:00 +0800</pubDate>
      <guid>https://rmmod.com/posts/cppblog/2009-12-20-random-thoughts-series-1-cpp-thoughts-en/</guid>
      <description>&lt;p&gt;After diving deep into the internal structure of STL and some of the deeper mechanisms and techniques of C++, a question that every programmer must face suddenly emerged.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why Programming in C++?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Why should I choose C++ over the simple and pure C, or the flexible and comprehensive JAVA and C#?&lt;/p&gt;&#xA;&lt;p&gt;Browsing through various technical forums and blogs of experts, everyone is arguing for their favorite language. C#/JAVA programmers say: don&amp;rsquo;t reinvent the wheel, with a good language platform and rich comprehensive libraries, you can focus on more important aspects like architecture and software engineering. Why be obsessed with the surface foundations of the language? The C++ standard doesn&amp;rsquo;t even have basic GUI libraries and network libraries. Even BJ, the creator of C++, wants to develop C++ into a platform.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
