<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Guanlan Dai</title><link>https://rmmod.com/posts/</link><description>All Posts | Guanlan Dai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rmmod.com/posts/" rel="self" type="application/rss+xml"/><item><title>Deep Dive into Kong Gateway's New Rust-Based Router</title><link>https://rmmod.com/posts/rust-based-router-kong-gateway/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/rust-based-router-kong-gateway/</guid><description><![CDATA[<h2 id="what-is-the-expressions-router">What is the Expressions Router?</h2>
<p>The router component in the Kong Gateway is a crucial element for traffic handling, allowing the definition of specific matching rules to identify and process client requests. As a core component of the gateway, the router plays a vital role in ensuring the functionality, flexibility, security as well as performance of the gateway.</p>
<p></p>
<p>In the 3.0 version update of the Kong API Gateway, the routing system was completely rewritten in Rust — a memory-safe and efficient language. A concise DSL (Domain Specific Language) was designed to define routing rules efficiently, called the &ldquo;Expressions Router.&rdquo; The new design reduced the routing construction time by 75% when handling up to 10,000 routing rules, significantly decreasing from 20 seconds to 5 seconds.</p>]]></description></item><item><title>Protecting Services With Kong Gateway Rate Limiting</title><link>https://rmmod.com/posts/kong-gateway-rate-limiting/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/kong-gateway-rate-limiting/</guid><description><![CDATA[<p>The Kong Gateway Rate Limiting <a href="https://docs.konghq.com/hub/kong-inc/rate-limiting" target="_blank" rel="noopener noreffer">plugin</a>
 is one of our most popular traffic control add-ons. You can configure the plugin with a policy for what constitutes &ldquo;similar requests&rdquo; (requests coming from the same IP address, for example), and you can set your limits (limit to 10 requests per minute, for example). This tutorial will walk through how simple it is to enable rate limiting in your <a href="https://konghq.com/kong" target="_blank" rel="noopener noreffer">Kong Gateway</a>
.</p>
<h2 id="rate-limiting-protecting-your-server-101">Rate Limiting: Protecting Your Server 101</h2>
<p>Let&rsquo;s take a step back and go over the concept of rate limiting for those who aren&rsquo;t familiar.</p>]]></description></item><item><title>How to Design a Scalable Rate Limiting Algorithm</title><link>https://rmmod.com/posts/how-to-design-a-scalable-rate-limiting-algorithm/</link><pubDate>Fri, 15 Jan 2021 12:19:18 +0800</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/how-to-design-a-scalable-rate-limiting-algorithm/</guid><description><![CDATA[<h2 id="what-is-rate-limiting">What is rate limiting?</h2>
<p>Rate limiting protects your APIs from inadvertent or malicious overuse by limiting how often each user can call the API. Without rate limiting, each user may make a request as often as they like, leading to &ldquo;spikes&rdquo; of requests that starve other consumers. Once enabled, rate limiting can only perform a fixed number of requests per second. A rate limiting algorithm helps automate the process.</p>
<p></p>]]></description></item><item><title>Practical Tips on Writing an Effective Web Crawler</title><link>https://rmmod.com/posts/effective-web-crawler/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/effective-web-crawler/</guid><description><![CDATA[<p>A web crawler is a hard-working bot to gather information or index the pages on the Internet. It starts at some seeds URLs and finds every hyperlink on each page, and then crawler will visit those hyperlinks recursively.</p>
<h3 id="1-choose-an-ideal-programming-language">1. Choose an Ideal Programming Language</h3>
<p>Based on the ranking of popular languages on developing web crawlers (based on result numbers of relative repositories host on Github on February, 2013). Python or Ruby probably is a wise choice, the mainly speed limit of web crawler is network latency not CPU, so choose Python or Ruby as a language to develop a web crawler will make life easier. Python provide some standard libraries, they are very useful, such like urllib, httplib and regex, those libraries can handle lots of work. Python also has plenty of valuable third-party libraries worth a try: <strong><a href="http://scrapy.org/" target="_blank" rel="noopener noreffer">scrapy</a>
</strong>, a web scraping framework. <strong><a href="http://urllib3.readthedocs.org/en/latest/" target="_blank" rel="noopener noreffer">urllib3</a>
</strong>, a Python HTTP library with thread-safe connection pooling, file post support. <strong><a href="http://greenlet.readthedocs.org/" target="_blank" rel="noopener noreffer">greenlet</a>
</strong>, a Lightweight concurrent programming framework. <em><strong><a href="http://twistedmatrix.com/" target="_blank" rel="noopener noreffer">twisted</a>
</strong></em>, an <strong>event-driven networking engine.</strong>  </p>]]></description></item><item><title>Snippets for Racket Language</title><link>https://rmmod.com/posts/snippets-for-racket-language/</link><pubDate>Sun, 03 Feb 2013 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/snippets-for-racket-language/</guid><description><![CDATA[<p>In the CS 5010 - Programming Design Paradigm course, we need write tons of documents,  repeat ourselves again and again, so I develop this snippet to save us time. If you using vim, you need install <a href="http://www.vim.org/scripts/script.php?script_id=2540" target="_blank" rel="noopener noreffer">snipMate</a>
 first, You can get the snippet on my Github: <a href="https://github.com/guanlan/snippet-for-racket" target="_blank" rel="noopener noreffer">https://github.com/guanlan/snippet-for-racket</a>
 download the snippet file and put in ~/.vim/snippets/ You can <a href="http://www.youtube.com/watch?v=upGPM9jN25Y" target="_blank" rel="noopener noreffer">watch demo here</a>
 This snippets is also available on sublime, you can <a href="http://web-design-weekly.com/2012/07/03/snippets-in-sublime-text-2/" target="_blank" rel="noopener noreffer">read tutorial here</a>
.</p>]]></description></item><item><title>Rethink in Functional Languages</title><link>https://rmmod.com/posts/rethink-in-functional-languages/</link><pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/rethink-in-functional-languages/</guid><description><![CDATA[<p>After about 3 months to learn and using Racket (a programming language in Lisp/Scheme family),  I learning lots of concepts of programming. The most important thing in FL(functional languages) is: <strong>&quot;<em>All data are immutable. All functions are pure.</em>&quot;</strong>  </p>
<h2 id="immutable-data"> Immutable Data</h2>
<p>Immutable data cannot be modified after being created. It has many advantages:</p>
<ol>
<li><strong>Inherently Thread safety</strong> Parallel programming is the nightmare of some programers, because different threads simultaneously access the same object can cause unexpected problem, such like a race conditions. The most famous and classical example is <a href="http://en.wikipedia.org/wiki/Race_condition#Example" target="_blank" rel="noopener noreffer">Bank Account Problem</a>
. Today we get more and more cores in our computers, so the <a href="http://www.infoq.com/news/2008/06/scala-vs-erlang" target="_blank" rel="noopener noreffer">multi-core crisis</a>
 we need to face, some experts believe in the future, we using Scala or Erlang to deal with this crisis.Interesting thing is many &ldquo;next generation&rdquo; language is either the functional or support functional paradigm.</li>
<li><strong>Eliminate side-effects</strong> There are so many reasons. Most important thing is global variables are difficult to understand. For example, if we want understand one functions in the non-trival project,  and we find a variable define in other place, so we will jump to the definition of this variable and other places where modify it, it will cost us more time to figure out what the exactly meaning of this function. So there is the same reason why the code is much easier to understand if we use immutable objects, because the scope of an immutable object is limited as possible. It will make our programming easier and more robust.</li>
</ol>
<p>  The programming experts from other languages also know we need use immutable data as more as possible: Joshua Bloch,the author of Effective Java, said, “If an object is immutable, it can be in only one state, and you win big.You never have to worry about what state the object is in, and you can share it freely, with no need for synchronization.” Scott Meyers, Effective C++, Item 3: <a href="http://codeidol.com/cpp/effective-cpp/Accustoming-Yourself-to-C/Item-3-Use-const-whenever-possible/" target="_blank" rel="noopener noreffer">Use <em>const</em> whenever possible</a>
. Other languages also use immutable data frequently, such like Python, the number/string/tuple types are immutable data, the String build-in class in Java is immutable too. But immutable data is inconvenient in some situation:</p>]]></description></item><item><title>How to use Python like Lisp</title><link>https://rmmod.com/posts/how-to-use-python-like-lisp/</link><pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/how-to-use-python-like-lisp/</guid><description><![CDATA[<p>Lisp has some very effective way to get jobs done, this article give you a direct way to use Python like Lisp.```
cons = lambda el, lst: (el, lst)</p>
<pre><code class="">mklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None) </code></pre>
<p>car = lambda lst: lst[0] if lst else lst</p>
<pre><code class="">cdr = lambda lst: lst[1] if lst else lst </code></pre>
<p>nth = lambda n, lst: nth(n-1, cdr(lst)) if n ]]&gt; 0 else car(lst)</p>]]></description></item><item><title>Python Basic Objects Learning Notes</title><link>https://rmmod.com/posts/cppblog/2011-07-21-python-basic-objects-learning-notes-en/</link><pubDate>Thu, 21 Jul 2011 00:00:00 +0800</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/cppblog/2011-07-21-python-basic-objects-learning-notes-en/</guid><description><![CDATA[<p>Recently revisiting the book &ldquo;Python Source Code Analysis&rdquo;, I&rsquo;ve recorded the key points about Python basic objects as follows:</p>
<pre><code>**Python Integer Objects**  
 1. Python integers use C language's long type for storage  
2. Python int addition checks if the result overflows, and automatically converts to pyLongObject if it does  
3. Documentation in Python is seamlessly integrated into the language implementation  
</code></pre>
<p>1 a = 11<br>
2 print a.<strong>doc</strong></p>
<pre><code>4. Small integer objects are completely cached in memory, other integer objects take turns using a block of memory space  
5. Small integer objects are created in _PyInt_Init called during Python initialization, and exist until the Python virtual machine exits





**Python String Objects**  
 1. After pyStringObject is created, the internally maintained string cannot be changed   
2. Is the intern mechanism only used when character array length is 0 or 1? The code provided in the book is too simplified and doesn't explain clearly, but looking at the demonstration results later, it seems all strings implement the intern mechanism  
3. String concatenation operations severely impact Python program execution efficiency. Using join only allocates memory once, greatly improving efficiency. Usage example:  
</code></pre>
<p>&ldquo;&quot;.join([&lsquo;s1&rsquo;,&lsquo;s2&rsquo;,&lsquo;s3&rsquo;])</p>]]></description></item><item><title>[Essay] Look at This Year's Programmers' Problem-Solving Sequence</title><link>https://rmmod.com/posts/cppblog/2010-10-24-look-at-this-years-programmers-problem-solving-sequence-en/</link><pubDate>Sun, 24 Oct 2010 00:00:00 +0800</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/cppblog/2010-10-24-look-at-this-years-programmers-problem-solving-sequence-en/</guid><description><![CDATA[<p>2010 developer&rsquo;s problem solving sequence:</p>
<p>from:<a href="http://twitter.com/#%21/activa" title="Philippe Leybaert" target="_blank" rel="noopener noreffer">@activa</a>
</p>
<p>1.Google<br>
For technical problems, definitely check Google and Wikipedia. Use Baidu more if you want to see adult product ads.</p>
<p>2.Coworkers<br>
Ask coworkers for help. If your colleagues are helpful, technically skilled, and have encountered similar problems, their advice can be very valuable and might solve the problem immediately.</p>
<p>3.StackOverflow<br>
Search for answers on programming help websites, or post questions if you can&rsquo;t find answers. There are quite a lot of helpful people, but it seems this site has more Java/.Net questions.</p>]]></description></item><item><title>[Tips] Linux Command Line Decompression Tips</title><link>https://rmmod.com/posts/cppblog/2010-10-07-linux-command-line-decompression-tips-en/</link><pubDate>Thu, 07 Oct 2010 00:00:00 +0800</pubDate><author>guanlan</author><guid>https://rmmod.com/posts/cppblog/2010-10-07-linux-command-line-decompression-tips-en/</guid><description><![CDATA[<p>Everyone finds it frustrating that Linux has numerous compression formats, and each format corresponds to different commands, which is quite a headache.<br>
Let me introduce a method to you:<br>
Add this to your bashrc:</p>
<p>ex () {<br>
if [ -f $1 ] ; then<br>
case $1 in<br>
*.tar.bz2) tar xjf $1 ;;<br>
*.tar.gz) tar xzf $1 ;;<br>
*.bz2) bunzip2 $1 ;;<br>
*.rar) rar x $1 ;;<br>
*.gz) gunzip $1 ;;<br>
*.tar) tar xf $1 ;;<br>
*.tbz2) tar xjf $1 ;;<br>
*.tgz) tar xzf $1 ;;<br>
*.zip) unzip $1 ;;<br>
*.Z) uncompress $1 ;;<br>
*.7z) 7z x $1 ;;<br>
*) echo &ldquo;Unable to extract &lsquo;$1&rsquo; file!!&rdquo; ;;<br>
esac<br>
else<br>
echo &ldquo;&rsquo;$1&rsquo; is not a valid file!&rdquo;<br>
fi<br>
}</p>]]></description></item></channel></rss>